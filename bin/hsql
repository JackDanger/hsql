#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require 'json'
require 'active_support/time'

options = {}
option_parser = OptionParser.new do |opts|
  opts.banner = <<-BANNER
Usage: #{__FILE__} file [environment] [--yaml]

ARGUMENTS
  file: Any *.sql file that has a YAML header ending in three hyphens.

OPTIONS
BANNER

  opts.on('-d DATE',
          '--date DATE',
          '--timestamp DATE', 'The time that the SQL will consider to be "now".') do |option|
    options[:timestamp] = Time.parse(option) if option
  end
  opts.on('-e ENV',
          '--env ENV',
          'Which key of the YAML header "data:" key you want to interpolate.') do |option|
    options[:environment] = option
  end
  opts.on('-y', '--yaml', 'Output just the metadata for this file as YAML') do |_option|
    options[:meta_only] = 'yaml'
  end
  opts.on('-j', '--json', 'Output just the metadata for this file as JSON') do |_option|
    options[:meta_only] = 'json'
  end
  opts.on_tail('-v', '--version', 'Show the current version of HSQL') do |_option|
    puts HSQL::VERSION
    exit 1
  end
  opts.on('-h', '--help', 'Show the full help documentation') do |_option|
    require_relative '../lib/hsql/data'
    <<-HELP
TEMPLATE

You can use the Mustache syntax (three curly braces) to interpolate any of your
'data' into your SQL. You specify the data in the YAML header like so:

    data:
      production:     # whatever you want to be interpolated into your SQL
        name: Alison  # when you pass 'production' as the environment argument
      development:
        name: Kailey
    ---
    SELECT * FROM users WHERE name = '{{{name}}}'


There are some common date values available to you at all times, without having
to be defined in the YAML header:

#{HSQL::Data.for_humans}

For more details, run:
  open https://github.com/JackDanger/hsql
HELP
  end
end
option_parser.parse!

filename = ARGV.first

unless filename
  puts option_parser
  exit 1
end

begin
  file = File.new(filename)
rescue Errno::ENOENT
  puts "#{filename.inspect}: No such file"
  exit 1
end

require_relative '../lib/hsql'

file = HSQL::File.parse_file(file, options)
if 'yaml' == options[:meta_only]
  puts file.metadata.to_yaml
elsif 'json' == options[:meta_only]
  puts file.metadata.to_json
else
  file.queries.each do |query|
    # Runs the query through the parser and then deparses it
    puts query
  end
end
